{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Phonebook/Phonebook.js","App.js","index.js","components/Phonebook/Phonebook.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","onSubmit","contacts","useState","name","setName","number","setNumber","onFormChange","target","value","checkContactList","normalizedName","toLocaleLowerCase","find","contact","alert","newContactId","shortid","generate","id","addContact","resetForm","className","s","form","e","preventDefault","label","htmlFor","span","input","type","placeholder","pattern","title","required","onChange","btn","ContactList","onDeleteContact","ul","map","li","onClick","Filter","console","log","defaultContact","Phonebook","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStarage","filter","box","divBox","boxList","normalizedFilter","includes","getFilteredContacts","contactId","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f20134d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__210dv\",\"label\":\"ContactForm_label__3FUMU\",\"input\":\"ContactForm_input__3EDjH\",\"span\":\"ContactForm_span__2WmmD\",\"btn\":\"ContactForm_btn__3HGuw\"};","// import React, { Component } from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm({ onSubmit, contacts }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n    resetForm();\n    checkContactList();\n  };\n\n  const onFormChange = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const addContact = () => {\n    // const { name, number } = this.state;\n    // const { onSubmit } = this.props;\n    const newContactId = shortid.generate();\n    const newContact = { name, number, id: newContactId };\n    onSubmit(newContact);\n  };\n\n  const checkContactList = () => {\n    // const { contacts } = this.props;\n    // const { name } = this.state;\n    const normalizedName = name.toLocaleLowerCase();\n    contacts.find(\n      contact => contact.name.toLocaleLowerCase() === normalizedName,\n    )\n      ? alert(`${name} is already in contacts`)\n      : addContact();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n    // this.setState({ name: '', number: '' });\n  };\n\n  return (\n    <form className={s.form} onSubmit={onSubmitForm}>\n      <label className={s.label} htmlFor={shortid.generate()}>\n        <span className={s.span}>Name</span>\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Григор Григорян\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={onFormChange}\n          id={shortid.generate()}\n        />\n      </label>\n      <label className={s.label} htmlFor={shortid.generate()}>\n        <span className={s.span}>Number</span>\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"111-22-33\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={onFormChange}\n          id={shortid.generate()}\n        />\n      </label>\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  onSubmit: PropTypes.func.isRequired,\n};\n\n// class OldContactForm extends Component {\n//   static propTypes = {\n//     contacts: PropTypes.arrayOf(PropTypes.object),\n//     onSubmit: PropTypes.func.isRequired,\n//   };\n\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   addContact = () => {\n//     const { name, number } = this.state;\n//     const { onSubmit } = this.props;\n//     const newContactId = shortid.generate();\n//     const newContact = { name, number, id: newContactId };\n//     onSubmit(newContact);\n//   };\n\n//   checkContactList = () => {\n//     const { contacts } = this.props;\n//     const { name } = this.state;\n//     const normalizedName = name.toLocaleLowerCase();\n//     contacts.find(\n//       contact => contact.name.toLocaleLowerCase() === normalizedName,\n//     )\n//       ? alert(`${name} is already in contacts`)\n//       : this.addContact();\n//   };\n\n//   onFormChange = ({ target }) => {\n//     const { name, value } = target;\n\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   onSubmitForm = e => {\n//     e.preventDefault();\n//     this.resetForm();\n//     this.checkContactList();\n//   };\n\n//   resetForm = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form className={s.form} onSubmit={this.onSubmitForm}>\n//         <label className={s.label} htmlFor={this.nameInputId}>\n//           <span className={s.span}>Name</span>\n//           <input\n//             className={s.input}\n//             type=\"text\"\n//             name=\"name\"\n//             placeholder=\"Григор Григорян\"\n//             value={name}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             onChange={this.onFormChange}\n//             id={shortid.generate()}\n//           />\n//         </label>\n//         <label className={s.label} htmlFor={this.numberInputId}>\n//           <span className={s.span}>Number</span>\n//           <input\n//             className={s.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             placeholder=\"111-22-33\"\n//             value={number}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             onChange={this.onFormChange}\n//             id={shortid.generate()}\n//           />\n//         </label>\n//         <button className={s.btn} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <ul className={s.ul}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={s.li} key={id}>\r\n          {name}: {number}\r\n          <button className={s.btn} onClick={() => onDeleteContact(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <label className={s.label}>\r\n      <span className={s.span}>Find contacts by name</span>\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","// import React, { Component } from 'react';\nimport { useState, useEffect } from 'react';\nimport defaultContact from './defaultContact.json';\nimport s from './Phonebook.module.css';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\n\nconsole.log(defaultContact);\n\nconst useLocalStarage = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nexport default function Phonebook() {\n  const [contacts, setContacts] = useLocalStarage('contacts', defaultContact);\n  const [filter, setFilter] = useState('');\n\n  const deleteContact = contactId => {\n    // this.setState(prevState => ({\n    //   contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    // }));\n  };\n\n  const formSubmitHandler = contact => {\n    // const { contacts } = this.state;\n    // this.setState({ contacts: [contact, ...contacts] });\n  };\n\n  const changeFilter = ({ target }) => {\n    // this.setState({ filter: target.value });\n  };\n\n  const getFilteredContacts = () => {\n    // const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <div className={s.box}>\n      <div>\n        <h1 className={s.title}>Phonebook</h1>\n        <ContactForm onSubmit={formSubmitHandler} contacts={contacts} />\n      </div>\n      <div className={s.divBox}>\n        <h2 className={s.title}>Contacts</h2>\n        <div className={s.boxList}>\n          <Filter value={filter} onChange={changeFilter} />\n          <ContactList\n            contacts={getFilteredContacts()}\n            onDeleteContact={deleteContact}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// class OldPhonebook extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parseContacts = JSON.parse(contacts);\n//     if (parseContacts) {\n//       this.setState({ contacts: parseContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   formSubmitHandler = contact => {\n//     const { contacts } = this.state;\n//     this.setState({ contacts: [contact, ...contacts] });\n//   };\n\n//   changeFilter = ({ target }) => {\n//     this.setState({ filter: target.value });\n//   };\n\n//   getFilteredContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLocaleLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLocaleLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   render() {\n//     const {\n//       state,\n//       formSubmitHandler,\n//       changeFilter,\n//       deleteContact,\n//       getFilteredContacts,\n//     } = this;\n//     const { contacts, filter } = state;\n\n//     return (\n//       <div className={s.box}>\n//         <div>\n//           <h1 className={s.title}>Phonebook</h1>\n//           <ContactForm onSubmit={formSubmitHandler} contacts={contacts} />\n//         </div>\n//         <div className={s.divBox}>\n//           <h2 className={s.title}>Contacts</h2>\n//           <div className={s.boxList}>\n//             <Filter value={filter} onChange={changeFilter} />\n//             <ContactList\n//               contacts={getFilteredContacts()}\n//               onDeleteContact={deleteContact}\n//             />\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Phonebook;\n","import './App.css';\r\nimport Phonebook from './components/Phonebook/Phonebook';\r\n\r\nfunction App() {\r\n  return (\r\n    <section className=\"container\">\r\n      <Phonebook />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Phonebook_title__2EbT1\",\"box\":\"Phonebook_box__31_GQ\",\"divBox\":\"Phonebook_divBox__Z9lig\",\"boxList\":\"Phonebook_boxList__2p9Bp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"ContactList_li__1zV7T\",\"ul\":\"ContactList_ul__fWXFH\",\"btn\":\"ContactList_btn__3M8P2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__PYtOY\",\"span\":\"Filter_span__3rkOz\",\"input\":\"Filter_input__1eD-R\"};"],"sourceRoot":""}